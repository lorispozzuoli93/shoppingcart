{"version":3,"sources":["Products/products.slice.ts","Cart/cart.slice.ts","store.hooks.ts","fake.api.ts","Products/ProductsList.tsx","Products/ProductForm.tsx","store.tsx","Cart/Cart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ValidationState","cartSlice","createSlice","name","initialState","reducers","addToCart","state","action","productIndex","findIndex","product","id","payload","amount","push","removeFromCart","filter","getCartProducts","cart","getTotalPrice","reduce","acc","next","price","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","validateProduct","Promise","resolve","reject","setTimeout","title","length","addProductAsync","createAsyncThunk","initialProduct","a","productAdapter","createEntityAdapter","getInitialState","errorMessage","undefined","validationState","filledInitialState","upsertMany","productsSlice","addProduct","upsertOne","removeProduct","removeOne","extraReducers","builder","addCase","fulfilled","Fulfilled","rejected","Rejected","error","message","pending","Pending","getErrorMessage","products","getSelectors","selectAllProducts","selectAll","selectById","selectEntities","selectIds","selectTotal","ProductsList","dispatch","map","onClick","addToCartHandler","ProductForm","useState","setProduct","handleChange","target","value","prev","onSubmit","e","preventDefault","style","border","type","placeholder","onChange","backgroundColor","store","configureStore","reducer","Cart","cartProducts","totalPrice","productId","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b22fceeb.chunk.js","sourcesContent":["import {\r\n  createAsyncThunk,\r\n  createSlice,\r\n  PayloadAction,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport validateProduct from \"../fake.api\";\r\nimport { Rootstate } from \"../store\";\r\n\r\nexport interface Product {\r\n  title: string;\r\n  price: number;\r\n  id: string;\r\n}\r\n\r\nexport enum ValidationState {\r\n  Fulfilled,\r\n  Pending,\r\n  Rejected,\r\n}\r\n\r\ninterface ProductsSliceState {\r\n  validationState?: ValidationState;\r\n  errorMessage?: string;\r\n}\r\n\r\nexport const addProductAsync = createAsyncThunk(\r\n  \"products/addNewsProduct\",\r\n  async (initialProduct: Product) => {\r\n    const product = await validateProduct(initialProduct);\r\n    return product;\r\n  }\r\n);\r\n\r\nconst initialProducts: Product[] = [\r\n  { title: \"Escape From Tarkov\", price: 60, id: \"eft\" },\r\n  { title: \"Hunt: Showdown\", price: 70, id: \"hunt\" },\r\n  { title: \"Hell Let Loose\", price: 55, id: \"hll\" },\r\n];\r\n\r\nconst productAdapter = createEntityAdapter<Product>();\r\nconst initialState = productAdapter.getInitialState<ProductsSliceState>({\r\n  errorMessage: undefined,\r\n  validationState: undefined,\r\n});\r\n\r\nconst filledInitialState = productAdapter.upsertMany(\r\n  initialState,\r\n  initialProducts\r\n);\r\n\r\nconst productsSlice = createSlice({\r\n  name: \"products\",\r\n  initialState: filledInitialState,\r\n  reducers: {\r\n    addProduct: (state, action: PayloadAction<Product>) => {\r\n      productAdapter.upsertOne(state, action.payload);\r\n    },\r\n    removeProduct: (state, action: PayloadAction<string>) => {\r\n      productAdapter.removeOne(state, action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addProductAsync.fulfilled, (state, action) => {\r\n      productAdapter.upsertOne(state, action.payload);\r\n      state.validationState = ValidationState.Fulfilled;\r\n      state.errorMessage = undefined;\r\n    });\r\n    builder.addCase(addProductAsync.rejected, (state, action) => ({\r\n      ...state,\r\n      validationState: ValidationState.Rejected,\r\n      errorMessage: action.error.message,\r\n    }));\r\n    builder.addCase(addProductAsync.pending, (state, action) => ({\r\n      ...state,\r\n      validationState: ValidationState.Pending,\r\n      errorMessage: undefined,\r\n    }));\r\n  },\r\n});\r\n\r\nexport const { addProduct, removeProduct } = productsSlice.actions;\r\n\r\nexport const getProductsSelector = (state: Rootstate) =>\r\n  state.products.entities;\r\n\r\nexport const getErrorMessage = (state: Rootstate) =>\r\n  state.products.errorMessage;\r\n\r\nexport const {\r\n  selectAll: selectAllProducts,\r\n  selectById: selectProductById,\r\n  selectEntities: selectProductEntitie,\r\n  selectIds: selectProductIds,\r\n  selectTotal: selectTotalProducts,\r\n} = productAdapter.getSelectors<Rootstate>((state) => state.products);\r\n\r\nexport default productsSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"../Products/products.slice\";\r\nimport { Rootstate } from \"../store\";\r\n\r\ninterface CartProduct extends Product {\r\n  amount: number;\r\n}\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: [] as CartProduct[],\r\n  reducers: {\r\n    addToCart: (state, action: PayloadAction<Product>) => {\r\n      const productIndex = state.findIndex(\r\n        (product) => product.id === action.payload.id\r\n      );\r\n      if (productIndex !== -1) {\r\n        state[productIndex].amount += 1;\r\n      } else {\r\n        state.push({ ...action.payload, amount: 1 });\r\n      }\r\n    },\r\n    removeFromCart: (state, action: PayloadAction<string>) => {\r\n      const productIndex = state.findIndex(\r\n        (product) => product.id === action.payload\r\n      );\r\n      if (state[productIndex].amount > 1) {\r\n        state[productIndex].amount -= 1;\r\n      } else {\r\n        return state.filter((product) => product.id !== action.payload);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const getCartProducts = (state: Rootstate) => state.cart;\r\nexport const getTotalPrice = (state: Rootstate) =>\r\n  state.cart.reduce((acc, next) => (acc += next.amount + next.price), 0);\r\n\r\nexport const { addToCart, removeFromCart } = cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { Rootstate, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<Rootstate> = useSelector;\r\n","import { Product } from \"./Products/products.slice\";\r\n\r\nconst validateProduct = (product: Product): Promise<Product> =>\r\n  new Promise((resolve, reject) =>\r\n    setTimeout(() => {\r\n      if (product.title.length === 0) {\r\n        reject(\"No titke\");\r\n      }\r\n      if (product.price <= 0) {\r\n        reject(\"Price is incorrect\");\r\n      }\r\n      resolve(product);\r\n    }, 500)\r\n  );\r\n\r\nexport default validateProduct;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { addToCart } from \"../Cart/cart.slice\";\r\nimport { useAppDispatch } from \"../store.hooks\";\r\nimport { Product, removeProduct, selectAllProducts } from \"./products.slice\";\r\n\r\nconst ProductsList: React.FC = () => {\r\n  const products = useSelector(selectAllProducts);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const removeFromStore = (id: string) => {\r\n    dispatch(removeProduct(id));\r\n  };\r\n\r\n  const addToCartHandler = (product: Product) => dispatch(addToCart(product));\r\n  return (\r\n    <div>\r\n      <h2>Games list</h2>\r\n      {products.map((product) => (\r\n        <div key={product.id}>\r\n          <span>{`${product.title} : ${product.price}`}</span>\r\n          <button onClick={() => addToCartHandler(product)}>Add To Cart</button>\r\n          <button onClick={() => removeFromStore(product.id)}>\r\n            Remove from the store\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsList;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../store.hooks\";\r\nimport { addProductAsync, getErrorMessage, Product } from \"./products.slice\";\r\n\r\nconst ProductForm: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const errorMessage = useSelector(getErrorMessage);\r\n  const [product, setProduct] = useState<Product>({\r\n    id: \"\",\r\n    title: \"\",\r\n    price: 0,\r\n  });\r\n  const handleChange = ({\r\n    target: { name, value },\r\n  }: React.ChangeEvent<HTMLInputElement>) =>\r\n    setProduct((prev) => {\r\n      (prev as any)[name] = value;\r\n      const newValue = { ...prev };\r\n      return newValue;\r\n    });\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    dispatch(addProductAsync(product));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Add game To The Store</h2>\r\n      {errorMessage && <span>error: {errorMessage}</span>}\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          style={{ border: errorMessage ? \"1px solid red\" : \"1px solid black\" }}\r\n          type=\"text\"\r\n          placeholder=\"Game title\"\r\n          name=\"title\"\r\n          value={product.title}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          style={{ border: errorMessage ? \"1px solid red\" : \"1px solid black\" }}\r\n          type=\"number\"\r\n          placeholder=\"Price\"\r\n          name=\"price\"\r\n          value={product.price}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          style={{ border: errorMessage ? \"1px solid red\" : \"1px solid black\" }}\r\n          type=\"text\"\r\n          placeholder=\"Id\"\r\n          name=\"id\"\r\n          value={product.id}\r\n          onChange={handleChange}\r\n        />\r\n        <button\r\n          style={{ backgroundColor: errorMessage ? \"red\" : \"#f2f5f9\" }}\r\n          type=\"submit\"\r\n        >\r\n          Add product\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport products from \"./Products/products.slice\";\r\nimport cart from \"./Cart/cart.slice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    products,\r\n    cart,\r\n  },\r\n});\r\n\r\nexport type Rootstate = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../store.hooks\";\r\nimport { getCartProducts, getTotalPrice, removeFromCart } from \"./cart.slice\";\r\n\r\nconst Cart: React.FC = () => {\r\n  const cartProducts = useAppSelector(getCartProducts);\r\n  const totalPrice = useAppSelector(getTotalPrice);\r\n  const dispatch = useAppDispatch();\r\n  const handleRemoveFromCart = (productId: string) =>\r\n    dispatch(removeFromCart(productId));\r\n  return (\r\n    <>\r\n      <h2>Cart</h2>\r\n      <h5>{totalPrice}</h5>\r\n      {cartProducts.map((product) => (\r\n        <div key={product.id}>\r\n          <span>{product.title}</span>\r\n          <span>{product.amount}</span>\r\n          <button onClick={() => handleRemoveFromCart(product.id)}>\r\n            Remove from cart\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import \"./App.css\";\nimport ProductsList from \"./Products/ProductsList\";\nimport ProductForm from \"./Products/ProductForm\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Cart from \"./Cart/Cart\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <ProductsList />\n      <ProductForm />\n      <Cart />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}